// <auto-generated />
using System;
using City.Api.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace City.Api.Data.Migrations
{
    [DbContext(typeof(TownContext))]
    partial class TownContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.0-rc1-32029")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("City.Api.Models.Entities.Sight", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description")
                        .HasMaxLength(200);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30);

                    b.Property<Guid>("TownId");

                    b.HasKey("Id");

                    b.HasIndex("TownId");

                    b.ToTable("Sights");

                    b.HasData(
                        new { Id = new Guid("e6a4ed1d-a17c-4bd8-994f-c6679157e464"), Description = "The most visited urban park in the world!", Name = "Central Park", TownId = new Guid("213b70c1-24f8-4279-b36c-cbfd732f9f3b") },
                        new { Id = new Guid("0691f43f-5388-4b68-a946-f2f9816c868c"), Description = "A 102-story skyscrapper located in Midtown Manhatan.", Name = "Empire State Building", TownId = new Guid("213b70c1-24f8-4279-b36c-cbfd732f9f3b") },
                        new { Id = new Guid("dca44c14-9615-407e-8f98-ab0e9b24bda6"), Description = "A Gothic style cathedral, conceived by architects Jan and Pieter Appelmans.", Name = "Cathedral of Our Lady", TownId = new Guid("f9598a2e-2b3a-4dda-b7d9-c103144f510f") },
                        new { Id = new Guid("a9c30a4a-30c0-458e-871e-8ee1741b54f2"), Description = "The finest example of railway architecture in Belgium.", Name = "Antwerp Central Station", TownId = new Guid("f9598a2e-2b3a-4dda-b7d9-c103144f510f") },
                        new { Id = new Guid("787ec76e-f3d0-4aa3-84e0-d8b13b844286"), Description = "A wrought iron lattice tower on the Champ de Mars, named after engineer Gustave Eiffel.", Name = "Eiffel Tower", TownId = new Guid("404659b6-39d1-49be-bf29-c7df4501d7ee") },
                        new { Id = new Guid("e35de2a6-9e7f-4567-a84a-49239d9680ef"), Description = "The world's largest museum.", Name = "The Louvra", TownId = new Guid("404659b6-39d1-49be-bf29-c7df4501d7ee") }
                    );
                });

            modelBuilder.Entity("City.Api.Models.Entities.Town", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description")
                        .HasMaxLength(200);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30);

                    b.HasKey("Id");

                    b.ToTable("Towns");

                    b.HasData(
                        new { Id = new Guid("213b70c1-24f8-4279-b36c-cbfd732f9f3b"), Description = "The one with that big park.", Name = "New York City" },
                        new { Id = new Guid("f9598a2e-2b3a-4dda-b7d9-c103144f510f"), Description = "The one with the cathedral that was never really finished.", Name = "Antwerp" },
                        new { Id = new Guid("404659b6-39d1-49be-bf29-c7df4501d7ee"), Description = "The one with that big tower.", Name = "Paris" }
                    );
                });

            modelBuilder.Entity("City.Api.Models.Entities.Sight", b =>
                {
                    b.HasOne("City.Api.Models.Entities.Town", "Town")
                        .WithMany("Sights")
                        .HasForeignKey("TownId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
